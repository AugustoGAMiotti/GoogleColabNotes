# -*- coding: utf-8 -*-
"""FGODataGamePressNew.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12FNwI16ZIe6YljZgjj31nyy7lxmX_UGh

Este código utiliza como database a seguinte url: https://fgo.gamepress.gg/servants e todos os seus subsequentes filhos.

O código captura as seguintes classes de todos os filhos: ID, Name, Attributes, Alignments, Traits, Tags, Stars, Skills e NP. Alguns desses campos recebem um tratamento especial por questões únicas no HTML

O código gera um dataframe e retorna um CSV a partir dele. Também gera um txt com os links que retornaram algum problema.
"""

import requests
import pandas as pd

url = 'https://fgo.gamepress.gg/servants'
response = requests.get(url, timeout=15)
r = requests.get('https://fgo.gamepress.gg/servants')
#Coletando o conteúdo
c = r.content
from bs4 import BeautifulSoup
#Criando Soup
soup = BeautifulSoup(c)
#soup

# Considere a tag <a> com href
child_links = soup.find_all('a', href=True)

# Salva
lista_url = []
for link in child_links:
    href = link['href']
    if href.startswith('/servant/'):
        full_url = f"https://fgo.gamepress.gg{href}"
        lista_url.append(full_url)

# Remove repetições, se existir
lista_url_filtrado = list(set(lista_url))
lista_url_filtrado.remove('https://fgo.gamepress.gg/servant/mash-kyrielight')
lista_url_filtrado.remove('https://fgo.gamepress.gg/servant/mash-ortinax')
lista_url_filtrado.remove('https://fgo.gamepress.gg/servant/beast-iiir')
lista_url_filtrado.remove('https://fgo.gamepress.gg/servant/solomon-grand-caster')
lista_url_filtrado.remove('https://fgo.gamepress.gg/servant/solomon-true')
lista_url_filtrado.remove('https://fgo.gamepress.gg/servant/goetia')
lista_url_filtrado.remove('https://fgo.gamepress.gg/servant/beast-iiil')
lista_url_filtrado.remove('https://fgo.gamepress.gg/servant/e-aqua-marie')
lista_url_filtrado.remove('https://fgo.gamepress.gg/servant/e-flare-marie')
lista_url_filtrado.remove('https://fgo.gamepress.gg/servant/beast-iv')
lista_url_filtrado.remove('https://fgo.gamepress.gg/servant/tiamat')
lista_url_filtrado.sort()
#lista_url_filtrado

df = pd.DataFrame({'ID' :['1', '1'],
                   'Name' :['Mash Kyrielight', 'Mash Kyrielight(Ortinax)'], 'Class' :['Shielder', 'Shielder'], 'Star' :['4', '4'],
                   'Attribute': ['Earth', 'Earth'], 'Alignment' :['Lawful Good', 'Lawful Good'],
                   'Traits' :['Humanoid, Servant, Female, Riding, Heaven or Earth, Weak to Enuma Elish, Spiritron Dress User, Knights of the Round Table, Pseudo-Servant, Hominidae, Summer Form',
                              'Humanoid, Servant, Female, Riding, Heaven or Earth, Weak to Enuma Elish, Spiritron Dress User, Knights of the Round Table, Pseudo-Servant, Hominidae, Summer Form'],
                   'Tags' :['DEF Support, Damage Cut, Support, Target Focus, Self NP Gain Up, Invincibility Support, NP Gauge Support, ATK Support, Support Arts NP',
                            'DEF Support, Damage Cut, Support, Target Focus, Self NP Gain Up, Invincibility Support, NP Gauge Support, ATK Support, Support Arts NP'],
                  'Skill 1 Base - Nome' :['Transient Wall of Snowflakes', 'Bunker Bolt A'],
                  'Skill 1 Base - Descricao' :['Increase DEF for all allies (3 turns).',
                                               'Increase own Buster Card effectiveness (1 time, 3 turns).Increase own Buster Card Critical Strength (1 time, 3 turns).'],
                  'Skill 1 Upgrade - Nome' :['Honorable Wall of Snowflakes', 'Black Barrel B'],
                  'Skill 1 Upgrade - Descricao' :['Increase DEF for all allies (3 turns).Apply Damage Cut by 2000 for all allies (1 time).',
                                                  'ncrease own Buster Card effectiveness (1 time, 3 turns).Increase own Buster Card Critical Strength (1 time, 3 turns).Apply Ignore DEF to self (3 turns).'],
                  'Skill 2 Base - Nome' :['Obscurant Wall of Chalk', 'Amalgam Goad D'],
                  'Skill 2 Base - Descricao' :['Apply Invincible to an ally (1 turn).Increase NP Gauge for an ally.', 'Apply Target Focus to self (1 turn).Increase own NP Gauge.'],
                  'Skill 2 Upgrade - Nome' :['', ''],
                  'Skill 2 Upgrade - Descricao' :['', ''],
                  'Skill 3 Base - Nome' :['Shield of Rousing Resolution', 'Tragic Shield of Rousal'],
                  'Skill 3 Base - Descricao' :['Apply Target Focus to self (1 turn).Increase own NP Gain (1 turn).', 'Apply Invincible to self (1 turn).Apply Target Focus to self (1 turn).Decrease own HP. [Demerit]'],
                  'Skill 3 Upgrade - Nome' :['', ''],
                  'Skill 3 Upgrade - Descricao' :['', ''],
                  'NP Base - Nome' :['Lord Chaldeas D', '	Mold Camelot D'],
                  'NP Base - Descricao' :['Apply Incoming Damage Cut for all allies (3 turns). Overcharge: Increase DEF for all allies (3 turns).',
                                          'Apply Incoming Damage Cut for all allies (3 times, 5 turns). Overcharge: Increase DEF for all allies (3 turns).'],
                  'NP Upgrade - Nome' :['Lord Camelot (Upgrade 1) B+++', ''],
                  'NP Upgrade - Descricao' :['Apply Incoming Damage Cut for all allies (3 turns).Increase ATK for all allies by 30% except self (3 turns). Overcharge: Increase DEF for all allies (3 turns).', '']
                  })

import time

i = 0
lista_atualizar_manualmente = []

for url in lista_url_filtrado:
    #time.sleep(10)
    response = requests.get(url)

    soup = BeautifulSoup(response.content, 'html.parser')

    #ID
    servant_id_raw = soup.find('table', class_ = 'assorted-info')
    servant_id = servant_id_raw.find_all('tr')[0].find('td').get_text(strip=True)

    #Name
    servant_div_1 = soup.find('div', id = 'page-title')
    servant_h1 = servant_div_1.find('h1')
    servant_name = servant_h1.get_text(strip=True)

    servant_table_align_raw = soup.find('table', class_ = 'attri-align-table')

    #Attribute
    servant_attribute_raw = servant_table_align_raw.find_all('tr')[0].find('a')
    servant_attribute = servant_attribute_raw.get_text(strip=True)

    #Alignment
    servant_alignment_raw = servant_table_align_raw.find_all('tr')[1].find('a')
    servant_alignment = servant_alignment_raw.get_text(strip=True)

    #Class
    servant_div_2 = soup.find('div', id = 'servant-subheader')
    servant_class_temp = servant_div_2.find('span', class_='class-title')
    servant_class = servant_class_temp.get_text(strip=True)

    #Rank
    servant_table_1 = soup.find('table', class_ = 'assorted-info')
    th_elements = servant_table_1.find_all('th')
    star = None
    for th in th_elements:
      if th.get_text(strip=True) == 'Cost':
        next_td = th.find_next_sibling('td')
        value = next_td.get_text(strip=True)
        if value == '3':
          star = 1
        elif value == '4':
          star = 2
        elif value == '7':
          star = 3
        elif value == '12':
          star = 4
        elif value == '16':
          star = 5
        break

    #Traits
    servant_div_3 = soup.find('div', class_ = 'traits-list-servant')
    if servant_div_3:
        servant_a_list = servant_div_3.find_all('a')
        traits = []
        for a in servant_a_list:
            traits.append(a.get_text(strip=True))

    #Tags
    servant_div_4 = soup.find('div', class_ = 'servant-tags-list clearfix')
    if servant_div_4:
        servant_a_list = servant_div_4.find_all('a')
        tags = []
        for a in servant_a_list:
            tags.append(a.get_text(strip=True))

    #Skills
    id_skills = soup.find('div', id='skills')

    class_skills = id_skills.find('div', class_='field field--name-field-servant-skills field--type-entity-reference-revisions field--label-hidden field__items')
    skill_raw_1 = class_skills.find('div', class_='field__item')
    skill_raw_2 = skill_raw_1.find_next_sibling('div', class_='field__item')
    skill_raw_3 = skill_raw_2.find_next_sibling('div', class_='field__item')

    #Skill 1
    servant_skill_single_1 = skill_raw_1.find('div', class_='servant-skill-single')
    servant_skill_upgrade_1 = skill_raw_1.find('div', class_='servant-skill-upgrade')

    #Skill 1 base
    servant_skill_single_1_name_raw = servant_skill_single_1.find('span', class_='field field--name-title field--type-string field--label-hidden')
    servant_skill_single_1_name = servant_skill_single_1_name_raw.get_text(strip=True)

    servant_skill_single_1_description_raw = servant_skill_single_1.find('p')
    servant_skill_single_1_description = servant_skill_single_1_description_raw.get_text(strip=True)

    #Skill 1 upgrade
    if servant_skill_upgrade_1:
        servant_skill_upgrade_1_name_raw = servant_skill_upgrade_1.find('span', class_='field field--name-title field--type-string field--label-hidden')
        servant_skill_upgrade_1_name = servant_skill_upgrade_1_name_raw.get_text(strip=True)

        servant_skill_upgrade_1_description_raw = servant_skill_upgrade_1.find('p')
        servant_skill_upgrade_1_description = servant_skill_upgrade_1_description_raw.get_text(strip=True)
    else:
        servant_skill_upgrade_1_name = None
        servant_skill_upgrade_1_description = None


    #Skill 2
    servant_skill_single_2 = skill_raw_2.find('div', class_='servant-skill-single')
    servant_skill_upgrade_2 = skill_raw_2.find('div', class_='servant-skill-upgrade')

    #Skill 2 base
    servant_skill_single_2_name_raw = servant_skill_single_2.find('span', class_='field field--name-title field--type-string field--label-hidden')
    servant_skill_single_2_name = servant_skill_single_2_name_raw.get_text(strip=True)

    servant_skill_single_2_description_raw = servant_skill_single_2.find('p')
    servant_skill_single_2_description = servant_skill_single_2_description_raw.get_text(strip=True)

    #Skill 2 upgrade
    if servant_skill_upgrade_2:
        servant_skill_upgrade_2_name_raw = servant_skill_upgrade_2.find('span', class_='field field--name-title field--type-string field--label-hidden')
        servant_skill_upgrade_2_name = servant_skill_upgrade_2_name_raw.get_text(strip=True)

        servant_skill_upgrade_2_description_raw = servant_skill_upgrade_2.find('p')
        servant_skill_upgrade_2_description = servant_skill_upgrade_2_description_raw.get_text(strip=True)
    else:
        servant_skill_upgrade_2_name = None
        servant_skill_upgrade_2_description = None

    #Skill 3
    servant_skill_single_3 = skill_raw_3.find('div', class_='servant-skill-single')
    servant_skill_upgrade_3 = skill_raw_3.find('div', class_='servant-skill-upgrade')

    #Skill 3 base
    servant_skill_single_3_name_raw = servant_skill_single_3.find('span', class_='field field--name-title field--type-string field--label-hidden')
    servant_skill_single_3_name = servant_skill_single_3_name_raw.get_text(strip=True)

    servant_skill_single_3_description_raw = servant_skill_single_3.find('p')
    servant_skill_single_3_description = servant_skill_single_3_description_raw.get_text(strip=True)

    #Skill 3 upgrade
    if servant_skill_upgrade_3:
        servant_skill_upgrade_3_name_raw = servant_skill_upgrade_3.find('span', class_='field field--name-title field--type-string field--label-hidden')
        servant_skill_upgrade_3_name = servant_skill_upgrade_3_name_raw.get_text(strip=True)

        servant_skill_upgrade_3_description_raw = servant_skill_upgrade_3.find('p')
        servant_skill_upgrade_3_description = servant_skill_upgrade_3_description_raw.get_text(strip=True)
    else:
        servant_skill_upgrade_3_name = None
        servant_skill_upgrade_3_description = None

    #NP
    class_np = soup.find('div', class_='np-base-container')

    servant_np_single = class_np.find('div', class_='servant-skill-single servant-skill-base np-skill-single')
    servant_np_upgrade = class_np.find('div', class_='np-upgrades')

    #NP base
    servant_np_single_name_raw_f = servant_np_single.find('div', class_='servant-skill-right')
    servant_np_single_name_raw = servant_np_single_name_raw_f.find('span', class_='field field--name-title field--type-string field--label-hidden')
    servant_np_single_name = servant_np_single_name_raw.get_text(strip=True)

    servant_np_single_description_raw_f = servant_np_single.find('div', class_='servant-skill-right')
    servant_np_single_description_raw = servant_np_single_description_raw_f.find('p')
    servant_np_single_description = servant_np_single_description_raw.get_text(strip=True)

    servant_np_single_description_over_p = servant_np_single_description_raw.find_next_sibling('p')
    servant_np_single_description_over_text_raw = servant_np_single_description_over_p.find('p')
    servant_np_single_description_over_text = servant_np_single_description_over_text_raw.get_text(strip=True)

    servant_np_single_description = servant_np_single_description + ' Overcharge: ' + servant_np_single_description_over_text

    #NP upgrade
    if servant_np_upgrade:
        servant_np_upgrade_name_raw_f = servant_np_upgrade.find('div', class_='servant-skill-right')
        servant_np_upgrade_name_raw = servant_np_upgrade_name_raw_f.find('span', class_='field field--name-title field--type-string field--label-hidden')
        servant_np_upgrade_name = servant_np_upgrade_name_raw.get_text(strip=True)

        servant_np_upgrade_description_raw_f = servant_np_upgrade.find('div', class_='servant-skill-right')
        servant_np_upgrade_description_raw = servant_np_upgrade_description_raw_f.find('p')
        servant_np_upgrade_description_over_p = servant_np_upgrade_description_raw.find_next_sibling('p')
        servant_np_upgrade_description = servant_np_upgrade_description_over_p.get_text(strip=True)

        servant_np_upgrade_description_over_text_raw_sp = servant_np_upgrade_description_over_p.find_next_sibling('p')

        if servant_np_upgrade_description_over_text_raw_sp:
            servant_np_upgrade_description_over_text_raw = servant_np_upgrade_description_over_text_raw_sp.find('p')

            if servant_np_upgrade_description_over_text_raw == None:
               servant_np_upgrade_name = None
               servant_np_upgrade_description = None
               lista_atualizar_manualmente.append(url)
            else:
                servant_np_upgrade_description_over_text = servant_np_upgrade_description_over_text_raw.get_text(strip=True)
                servant_np_upgrade_description = servant_np_upgrade_description + ' Overcharge: ' + servant_np_upgrade_description_over_text
        else: # Handle the case when there's no next sibling
            servant_np_upgrade_name = None
            servant_np_upgrade_description = None
            lista_atualizar_manualmente.append(url)
    else:
      servant_np_upgrade_name = None
      servant_np_upgrade_description = None

    #DF
    df.loc[len(df.index)] = [servant_id, servant_name, servant_attribute, servant_alignment, servant_class, star, traits, tags,
                         servant_skill_single_1_name, servant_skill_single_1_description, servant_skill_upgrade_1_name, servant_skill_upgrade_1_description,
                         servant_skill_single_2_name, servant_skill_single_2_description, servant_skill_upgrade_2_name, servant_skill_upgrade_2_description,
                         servant_skill_single_3_name, servant_skill_single_3_description, servant_skill_upgrade_3_name, servant_skill_upgrade_3_description,
                         servant_np_single_name, servant_np_single_description, servant_np_upgrade_name, servant_np_upgrade_description]

    print(servant_name, i)
    i += 1

df.to_csv('servants.csv')

with open('list.txt', 'w') as f:
  for item in lista_atualizar_manualmente:
    f.write("%s\n" % item)